@model IEnumerable<TFGv1_1.Models.Alert>

<div class="notification-header p-2 border-bottom bg-light">
    <h6 class="mb-0 fw-bold"><i class="fas fa-bell text-primary me-2"></i>Notificaciones</h6>
</div>

<div class="notification-body">
    @if (!Model.Any())
    {
        <div class="text-center p-4 text-muted">
            <i class="fas fa-check-circle fa-2x mb-3"></i>
            <p class="mb-0">No hay notificaciones pendientes</p>
        </div>
    }
    else
    {
        // Ordenar por fecha de creaci칩n (m치s reciente primero)
        var orderedAlerts = Model.OrderByDescending(a => a.CreatedAt);
        
        // Verificar si hay alguna notificaci칩n reciente (menos de 5 minutos)
        var recentThreshold = DateTime.Now.AddMinutes(-5);
        
        foreach (var alert in orderedAlerts)
        {
            // Determinar si es una notificaci칩n reciente
            bool isRecent = alert.CreatedAt > recentThreshold;
            string recentClass = isRecent ? "new-notification" : "";
            
            <div class="notification-item p-3 border-bottom @GetSeverityClass(alert.Severity) @recentClass" 
                 data-alert-id="@alert.AlertID" 
                 data-created-at="@alert.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                <div class="d-flex align-items-start">
                    <div class="notification-icon me-3">
                        <i class="@GetAlertTypeIcon(alert.AlertType) fa-lg"></i>
                    </div>
                    <div class="notification-content flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0 fw-bold">@alert.AlertType</h6>
                            <small class="text-muted">@alert.CreatedAt.ToString("HH:mm")</small>
                        </div>
                        <p class="mb-2 small">@alert.Message</p>
                        <div class="d-flex justify-content-between align-items-center mt-1">
                            <span class="badge rounded-pill @GetBadgeClass(alert.Severity)">
                                @alert.Severity
                            </span>
                            <div>
                                <a href="@Url.Action("Details", "Alert", new { id = alert.AlertID })" class="btn btn-sm btn-outline-primary rounded-pill">
                                    <i class="fas fa-eye"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<div class="notification-footer p-2 border-top bg-light d-grid">
    <a href="@Url.Action("Index", "Alert")" class="btn btn-outline-primary btn-sm">
        <i class="fas fa-list me-1"></i> Ver todas las alertas
    </a>
</div>

@functions {
    public string GetSeverityClass(TFGv1_1.Models.AlertSeverity severity)
    {
        switch (severity)
        {
            case TFGv1_1.Models.AlertSeverity.Critical:
                return "bg-danger bg-opacity-10";
            case TFGv1_1.Models.AlertSeverity.High:
                return "bg-warning bg-opacity-10";
            case TFGv1_1.Models.AlertSeverity.Medium:
                return "bg-info bg-opacity-10";
            case TFGv1_1.Models.AlertSeverity.Low:
                return "bg-secondary bg-opacity-10";
            default:
                return "";
        }
    }

    public string GetBadgeClass(TFGv1_1.Models.AlertSeverity severity)
    {
        switch (severity)
        {
            case TFGv1_1.Models.AlertSeverity.Critical:
                return "bg-danger";
            case TFGv1_1.Models.AlertSeverity.High:
                return "bg-warning text-dark";
            case TFGv1_1.Models.AlertSeverity.Medium:
                return "bg-info text-dark";
            case TFGv1_1.Models.AlertSeverity.Low:
                return "bg-secondary";
            default:
                return "bg-secondary";
        }
    }

    public string GetAlertTypeIcon(TFGv1_1.Models.AlertType type)
    {
        switch (type)
        {
            case TFGv1_1.Models.AlertType.Temperature:
                return "fas fa-thermometer-half text-danger";
            case TFGv1_1.Models.AlertType.Humidity:
                return "fas fa-tint text-info";
            case TFGv1_1.Models.AlertType.CO2:
                return "fas fa-wind text-warning";
            case TFGv1_1.Models.AlertType.Brightness:
                return "fas fa-sun text-warning";
            default:
                return "fas fa-bell text-secondary";
        }
    }
} 